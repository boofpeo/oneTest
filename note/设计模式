1、设计原则：
		开闭原则
			：对扩张开放，对修改关闭；
				使用抽象构建框架，用实现填充实现，实现复用。

		依赖倒置原则
			：高层不应该依赖底层，都应直接依赖抽象
				细节依赖抽象
				针对抽象接口编程
		单一职责原则
			：一个对类、借口、方法的更改应该只能有同一个原因

		接口隔离原则
			：用多个专门的借口，而不是用一个单一的总接口。
				细化接口，适度。
		迪米特原则
			：一个对象应该对其他对象保持最少的了解，最少知道。
				尽量降低类与类之间的耦合
		里氏替换原则
		合成复用原则


	(1)、创建型模式:
			简单工厂
				: 通过传入参数来由工厂创建实例，而不用关心创建对象的逻辑。
			工厂方法模式
				：由子类实现方法创建实例 Class clazz = Class.forName ; (InstanceClass)clazz.newInstance();
					反射通过对应的类名获取对应的类名
			抽象工厂模式
				：创建一系列或者相互依赖对象的接口。
					  海尔系列---产品族同一个产品不同品牌---产品等级
			建造者模式
				：将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。创建和使用分离
			单例模式
			原型模式

	(2) 结构型模式
			适配器模式
			装饰者模式
			代理模式
			外观模式
			桥接模式
			组合模式
			享元模式

	(3) 行为型模式
			策略模式
			    定义了算法家族，分别封装起来，让他们之间可以进行替换，此模式让算法的变化不会影响到使用算法的用户
				if else 的一种替换，系统有很多类，而他们的区别仅仅在于他们的行为不同
			观察者模式
				: 定义了对象之间的一对多依赖，让多个观察者对象同时监听某一个主题对象，当主题对象发生变化时，它的所有依赖者（观察者）
					都会收到通知并更新
			责任链模式
			备忘录模式
			模版方法模式
			迭代器模式
			中介者模式
			命令模式
			访问者模式
			解释器模式
			状态模式


2、
